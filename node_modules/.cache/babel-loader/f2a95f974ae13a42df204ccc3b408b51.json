{"ast":null,"code":"import _objectSpread from \"/Users/sergiorosa_local/Documents/Flux-Architecture/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { formatPrice } from '../../../util/format';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\n\nfunction* addToCart({\n  id\n}) {\n  const productExists = yield select(state => state.cart.find(p => p.id === id));\n  const stock = yield call(api.get, \"/stock/\".concat(id));\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount : 0;\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Quantity ordered out of stock');\n    return;\n  }\n\n  if (productExists) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, \"/products/\".concat(id));\n\n    const data = _objectSpread({}, response.data, {\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    });\n\n    yield put(addToCartSuccess(data));\n  }\n}\n\nfunction* updateAmount({\n  id,\n  amount\n}) {\n  if (amount <= 0) return; // const product = yield select(state => state.cart.find(p => p.id === id));\n\n  const stock = yield call(api.get, \"stock/\".concat(id));\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Quantity ordered out of stock');\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([takeLatest('@cart/ADD_REQUEST', addToCart), takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount)]);","map":{"version":3,"sources":["/Users/sergiorosa_local/Documents/Flux-Architecture/src/store/modules/cart/sagas.js"],"names":["call","select","put","all","takeLatest","toast","api","history","formatPrice","addToCartSuccess","updateAmountSuccess","addToCart","id","productExists","state","cart","find","p","stock","get","stockAmount","data","amount","currentAmount","error","response","priceFormatted","price","updateAmount"],"mappings":";AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,UAAjC,QAAmD,oBAAnD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;;AAEA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AAC1B,QAAMC,aAAa,GAAG,MAAMZ,MAAM,CAACa,KAAK,IACtCA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA9B,CADgC,CAAlC;AAIA,QAAMM,KAAK,GAAG,MAAMlB,IAAI,CAACM,GAAG,CAACa,GAAL,mBAAoBP,EAApB,EAAxB;AAEA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;AACA,QAAMC,aAAa,GAAGV,aAAa,GAAGA,aAAa,CAACS,MAAjB,GAA0B,CAA7D;AAEA,QAAMA,MAAM,GAAGC,aAAa,GAAG,CAA/B;;AAEA,MAAID,MAAM,GAAGF,WAAb,EAA0B;AACxBf,IAAAA,KAAK,CAACmB,KAAN,CAAY,+BAAZ;AACA;AACD;;AAED,MAAIX,aAAJ,EAAmB;AACjB,UAAMX,GAAG,CAACQ,mBAAmB,CAACE,EAAD,EAAKU,MAAL,CAApB,CAAT;AACD,GAFD,MAEO;AACL,UAAMG,QAAQ,GAAG,MAAMzB,IAAI,CAACM,GAAG,CAACa,GAAL,sBAAuBP,EAAvB,EAA3B;;AAEA,UAAMS,IAAI,qBACLI,QAAQ,CAACJ,IADJ;AAERC,MAAAA,MAAM,EAAE,CAFA;AAGRI,MAAAA,cAAc,EAAElB,WAAW,CAACiB,QAAQ,CAACJ,IAAT,CAAcM,KAAf;AAHnB,MAAV;;AAMA,UAAMzB,GAAG,CAACO,gBAAgB,CAACY,IAAD,CAAjB,CAAT;AACD;AACF;;AAED,UAAUO,YAAV,CAAuB;AAAEhB,EAAAA,EAAF;AAAMU,EAAAA;AAAN,CAAvB,EAAuC;AACrC,MAAIA,MAAM,IAAI,CAAd,EAAiB,OADoB,CAGrC;;AACA,QAAMJ,KAAK,GAAG,MAAMlB,IAAI,CAACM,GAAG,CAACa,GAAL,kBAAmBP,EAAnB,EAAxB;AACA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;;AAEA,MAAIA,MAAM,GAAGF,WAAb,EAA0B;AACxBf,IAAAA,KAAK,CAACmB,KAAN,CAAY,+BAAZ;AACD;;AAED,QAAMtB,GAAG,CAACQ,mBAAmB,CAACE,EAAD,EAAKU,MAAL,CAApB,CAAT;AACD;;AAED,eAAenB,GAAG,CAAC,CACjBC,UAAU,CAAC,mBAAD,EAAsBO,SAAtB,CADO,EAEjBP,UAAU,CAAC,6BAAD,EAAgCwB,YAAhC,CAFO,CAAD,CAAlB","sourcesContent":["import { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { formatPrice } from '../../../util/format';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\n\nfunction* addToCart({ id }) {\n  const productExists = yield select(state =>\n    state.cart.find(p => p.id === id)\n  );\n\n  const stock = yield call(api.get, `/stock/${id}`);\n\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount : 0;\n\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Quantity ordered out of stock');\n    return;\n  }\n\n  if (productExists) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, `/products/${id}`);\n\n    const data = {\n      ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price),\n    };\n\n    yield put(addToCartSuccess(data));\n  }\n}\n\nfunction* updateAmount({ id, amount }) {\n  if (amount <= 0) return;\n\n  // const product = yield select(state => state.cart.find(p => p.id === id));\n  const stock = yield call(api.get, `stock/${id}`);\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Quantity ordered out of stock');\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([\n  takeLatest('@cart/ADD_REQUEST', addToCart),\n  takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount),\n]);\n"]},"metadata":{},"sourceType":"module"}